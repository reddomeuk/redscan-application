import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { PentestEngagement, User } from '@/api/entities';
import { ArrowLeft, ArrowRight, Shield, CheckCircle } from 'lucide-react';
import { toast } from 'sonner';
import ActionButton from '../components/ui/ActionButton';

const WIZARD_STEPS = [
  { id: 'basics', title: 'Basic Information', description: 'Engagement type, priority, and vendor' },
  { id: 'scope', title: 'Scope & Targets', description: 'Test targets, exclusions, and rules' },
  { id: 'objectives', title: 'Objectives & ROE', description: 'Goals and rules of engagement' },
  { id: 'credentials', title: 'Credentials & Access', description: 'Secure credential sharing' },
  { id: 'deliverables', title: 'Deliverables', description: 'Expected outputs and reports' },
  { id: 'approvals', title: 'Approvals & Billing', description: 'Review and approve engagement' }
];

export default function PentestEngagementNewPage() {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    // Basic Information
    title: '',
    type: '',
    priority: 'Medium',
    estimated_days: 5,
    vendor_type: 'external',
    vendor_contact: '',
    billing_type: 'billable',
    billing_amount: 0,
    
    // Scope
    targets: [''],
    excluded_targets: [''],
    blackout_windows: [],
    dos_permitted: false,
    
    // Objectives
    objectives: '',
    rules_of_engagement: '',
    
    // Deliverables
    draft_report: true,
    final_report: true,
    sarif_export: false,
    retest_included: false,
    
    // Scheduling
    start_date: '',
    end_date: ''
  });

  const updateFormData = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const addArrayItem = (field) => {
    setFormData(prev => ({
      ...prev,
      [field]: [...prev[field], '']
    }));
  };

  const updateArrayItem = (field, index, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].map((item, i) => i === index ? value : item)
    }));
  };

  const removeArrayItem = (field, index) => {
    setFormData(prev => ({
      ...prev,
      [field]: prev[field].filter((_, i) => i !== index)
    }));
  };

  const nextStep = () => {
    if (currentStep < WIZARD_STEPS.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const validateCurrentStep = () => {
    switch (currentStep) {
      case 0: // Basics
        return formData.title && formData.type && formData.vendor_type;
      case 1: // Scope
        return formData.targets.some(t => t.trim());
      case 2: // Objectives
        return formData.objectives.trim();
      case 3: // Credentials
        return true; // Optional step
      case 4: // Deliverables
        return true; // Has defaults
      case 5: // Approvals
        return formData.start_date && formData.end_date;
      default:
        return true;
    }
  };

  const createEngagement = async () => {
    setLoading(true);
    try {
      const currentUser = await User.me();
      
      const engagementData = {
        ...formData,
        manager_user_id: currentUser.id,
        organization_id: currentUser.organization_id,
        status: 'Draft',
        scope: {
          targets: formData.targets.filter(t => t.trim()),
          excluded_targets: formData.excluded_targets.filter(t => t.trim()),
          blackout_windows: formData.blackout_windows,
          dos_permitted: formData.dos_permitted
        },
        deliverables: {
          draft_report: formData.draft_report,
          final_report: formData.final_report,
          sarif_export: formData.sarif_export,
          retest_included: formData.retest_included
        },
        findings_count: {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0,
          info: 0
        }
      };

      await PentestEngagement.create(engagementData);
      toast.success('Engagement created successfully');
      navigate(createPageUrl('PentestEngagements'));
    } catch (error) {
      console.error('Failed to create engagement:', error);
      toast.error('Failed to create engagement');
    } finally {
      setLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0: // Basic Information
        return (
          <div className="space-y-6">
            <div>
              <Label htmlFor="title" className="text-white">Engagement Title</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => updateFormData('title', e.target.value)}
                placeholder="e.g., Acme Web Application Security Assessment"
                className="mt-2 bg-slate-900 border-slate-700 text-white"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label htmlFor="type" className="text-white">Test Type</Label>
                <Select value={formData.type} onValueChange={(value) => updateFormData('type', value)}>
                  <SelectTrigger className="mt-2 bg-slate-900 border-slate-700 text-white">
                    <SelectValue placeholder="Select test type" />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    <SelectItem value="Web App">Web Application</SelectItem>
                    <SelectItem value="API">API Security</SelectItem>
                    <SelectItem value="Mobile">Mobile Application</SelectItem>
                    <SelectItem value="Cloud Infra">Cloud Infrastructure</SelectItem>
                    <SelectItem value="Network">Network Penetration</SelectItem>
                    <SelectItem value="Social Engineering">Social Engineering</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="priority" className="text-white">Priority</Label>
                <Select value={formData.priority} onValueChange={(value) => updateFormData('priority', value)}>
                  <SelectTrigger className="mt-2 bg-slate-900 border-slate-700 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    <SelectItem value="Low">Low</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Critical">Critical</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label htmlFor="vendor_type" className="text-white">Vendor Type</Label>
                <Select value={formData.vendor_type} onValueChange={(value) => updateFormData('vendor_type', value)}>
                  <SelectTrigger className="mt-2 bg-slate-900 border-slate-700 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    <SelectItem value="internal">Internal Team</SelectItem>
                    <SelectItem value="external">External Vendor</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="estimated_days" className="text-white">Estimated Duration (days)</Label>
                <Input
                  id="estimated_days"
                  type="number"
                  value={formData.estimated_days}
                  onChange={(e) => updateFormData('estimated_days', parseInt(e.target.value) || 0)}
                  className="mt-2 bg-slate-900 border-slate-700 text-white"
                />
              </div>
            </div>

            {formData.vendor_type === 'external' && (
              <div>
                <Label htmlFor="vendor_contact" className="text-white">Vendor Contact Email</Label>
                <Input
                  id="vendor_contact"
                  type="email"
                  value={formData.vendor_contact}
                  onChange={(e) => updateFormData('vendor_contact', e.target.value)}
                  placeholder="security@vendor.com"
                  className="mt-2 bg-slate-900 border-slate-700 text-white"
                />
              </div>
            )}
          </div>
        );

      case 1: // Scope & Targets
        return (
          <div className="space-y-6">
            <div>
              <Label className="text-white">Test Targets</Label>
              <p className="text-sm text-slate-400 mb-3">
                Specify domains, IP ranges, or endpoints to be tested
              </p>
              <div className="space-y-2">
                {formData.targets.map((target, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      value={target}
                      onChange={(e) => updateArrayItem('targets', index, e.target.value)}
                      placeholder="e.g., app.example.com, 192.168.1.0/24"
                      className="bg-slate-900 border-slate-700 text-white"
                    />
                    {formData.targets.length > 1 && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => removeArrayItem('targets', index)}
                        className="px-3"
                      >
                        ×
                      </Button>
                    )}
                  </div>
                ))}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => addArrayItem('targets')}
                  className="text-slate-300"
                >
                  Add Target
                </Button>
              </div>
            </div>

            <div>
              <Label className="text-white">Excluded Targets</Label>
              <p className="text-sm text-slate-400 mb-3">
                Systems or endpoints that should be excluded from testing
              </p>
              <div className="space-y-2">
                {formData.excluded_targets.map((target, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      value={target}
                      onChange={(e) => updateArrayItem('excluded_targets', index, e.target.value)}
                      placeholder="e.g., prod-db.example.com, payment system"
                      className="bg-slate-900 border-slate-700 text-white"
                    />
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => removeArrayItem('excluded_targets', index)}
                      className="px-3"
                    >
                      ×
                    </Button>
                  </div>
                ))}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => addArrayItem('excluded_targets')}
                  className="text-slate-300"
                >
                  Add Exclusion
                </Button>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="dos_permitted"
                checked={formData.dos_permitted}
                onCheckedChange={(checked) => updateFormData('dos_permitted', checked)}
              />
              <Label htmlFor="dos_permitted" className="text-white">
                Denial of Service (DoS) testing permitted
              </Label>
            </div>
          </div>
        );

      case 2: // Objectives & ROE
        return (
          <div className="space-y-6">
            <div>
              <Label htmlFor="objectives" className="text-white">Test Objectives</Label>
              <p className="text-sm text-slate-400 mb-3">
                Describe the goals and expected outcomes of this engagement
              </p>
              <Textarea
                id="objectives"
                value={formData.objectives}
                onChange={(e) => updateFormData('objectives', e.target.value)}
                placeholder="e.g., Identify vulnerabilities in the customer portal, assess API security, evaluate authentication mechanisms..."
                className="mt-2 bg-slate-900 border-slate-700 text-white h-32"
              />
            </div>

            <div>
              <Label htmlFor="rules_of_engagement" className="text-white">Rules of Engagement</Label>
              <p className="text-sm text-slate-400 mb-3">
                Legal constraints, data handling rules, and testing boundaries
              </p>
              <Textarea
                id="rules_of_engagement"
                value={formData.rules_of_engagement}
                onChange={(e) => updateFormData('rules_of_engagement', e.target.value)}
                placeholder="e.g., Testing limited to business hours, no data exfiltration, credential testing permitted with provided accounts..."
                className="mt-2 bg-slate-900 border-slate-700 text-white h-32"
              />
            </div>
          </div>
        );

      case 3: // Credentials & Access
        return (
          <div className="space-y-6">
            <Card className="bg-slate-900/50 border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Shield className="w-5 h-5 text-[#B00020]" />
                  Secure Credential Sharing
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-slate-400 mb-4">
                  Credentials will be stored encrypted and shared securely with approved testers. 
                  All access is logged and can be revoked at any time.
                </p>
                <div className="space-y-4">
                  <div className="p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
                    <h4 className="text-yellow-400 font-medium mb-2">Credential Management Features</h4>
                    <ul className="text-sm text-slate-300 space-y-1">
                      <li>• End-to-end encryption with tenant keys</li>
                      <li>• Time-limited access with approval workflow</li>
                      <li>• Complete audit trail of all access</li>
                      <li>• Automatic credential rotation recommendations</li>
                    </ul>
                  </div>
                  <p className="text-sm text-slate-400">
                    You can upload credentials and configure access policies after creating the engagement.
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        );

      case 4: // Deliverables
        return (
          <div className="space-y-6">
            <div>
              <Label className="text-white">Expected Deliverables</Label>
              <p className="text-sm text-slate-400 mb-4">
                Select the deliverables you expect from this engagement
              </p>
              
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="draft_report"
                    checked={formData.draft_report}
                    onCheckedChange={(checked) => updateFormData('draft_report', checked)}
                  />
                  <Label htmlFor="draft_report" className="text-white">
                    Draft Report (for client review)
                  </Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="final_report"
                    checked={formData.final_report}
                    onCheckedChange={(checked) => updateFormData('final_report', checked)}
                  />
                  <Label htmlFor="final_report" className="text-white">
                    Final Report (executive summary + technical findings)
                  </Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="sarif_export"
                    checked={formData.sarif_export}
                    onCheckedChange={(checked) => updateFormData('sarif_export', checked)}
                  />
                  <Label htmlFor="sarif_export" className="text-white">
                    SARIF Export (machine-readable findings)
                  </Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="retest_included"
                    checked={formData.retest_included}
                    onCheckedChange={(checked) => updateFormData('retest_included', checked)}
                  />
                  <Label htmlFor="retest_included" className="text-white">
                    Retest Included (verification of fixes)
                  </Label>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label htmlFor="billing_type" className="text-white">Billing Type</Label>
                <Select value={formData.billing_type} onValueChange={(value) => updateFormData('billing_type', value)}>
                  <SelectTrigger className="mt-2 bg-slate-900 border-slate-700 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-800 border-slate-700">
                    <SelectItem value="free">Free (included in plan)</SelectItem>
                    <SelectItem value="billable">Billable</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {formData.billing_type === 'billable' && (
                <div>
                  <Label htmlFor="billing_amount" className="text-white">Estimated Cost</Label>
                  <Input
                    id="billing_amount"
                    type="number"
                    value={formData.billing_amount}
                    onChange={(e) => updateFormData('billing_amount', parseFloat(e.target.value) || 0)}
                    placeholder="5000"
                    className="mt-2 bg-slate-900 border-slate-700 text-white"
                  />
                </div>
              )}
            </div>
          </div>
        );

      case 5: // Approvals & Billing
        return (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label htmlFor="start_date" className="text-white">Start Date</Label>
                <Input
                  id="start_date"
                  type="date"
                  value={formData.start_date}
                  onChange={(e) => updateFormData('start_date', e.target.value)}
                  className="mt-2 bg-slate-900 border-slate-700 text-white"
                />
              </div>

              <div>
                <Label htmlFor="end_date" className="text-white">End Date</Label>
                <Input
                  id="end_date"
                  type="date"
                  value={formData.end_date}
                  onChange={(e) => updateFormData('end_date', e.target.value)}
                  className="mt-2 bg-slate-900 border-slate-700 text-white"
                />
              </div>
            </div>

            {/* Engagement Summary */}
            <Card className="bg-slate-900/50 border-slate-700">
              <CardHeader>
                <CardTitle className="text-white">Engagement Summary</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <h4 className="text-slate-300 font-medium">Title</h4>
                      <p className="text-white">{formData.title}</p>
                    </div>
                    <div>
                      <h4 className="text-slate-300 font-medium">Type</h4>
                      <p className="text-white">{formData.type}</p>
                    </div>
                    <div>
                      <h4 className="text-slate-300 font-medium">Priority</h4>
                      <p className="text-white">{formData.priority}</p>
                    </div>
                    <div>
                      <h4 className="text-slate-300 font-medium">Duration</h4>
                      <p className="text-white">{formData.estimated_days} days</p>
                    </div>
                    <div>
                      <h4 className="text-slate-300 font-medium">Vendor</h4>
                      <p className="text-white">{formData.vendor_type === 'internal' ? 'Internal Team' : 'External Vendor'}</p>
                    </div>
                    <div>
                      <h4 className="text-slate-300 font-medium">Billing</h4>
                      <p className="text-white">
                        {formData.billing_type === 'free' ? 'Free' : `$${formData.billing_amount?.toLocaleString()}`}
                      </p>
                    </div>
                  </div>
                  <div>
                    <h4 className="text-slate-300 font-medium">Targets</h4>
                    <p className="text-white">{formData.targets.filter(t => t.trim()).length} target(s) defined</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div className="flex items-center gap-4">
        <Button 
          variant="outline" 
          onClick={() => navigate(createPageUrl('PentestEngagements'))}
          className="text-slate-300"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Engagements
        </Button>
        <div>
          <h1 className="text-3xl font-bold text-white">Create New Engagement</h1>
          <p className="text-slate-400">Set up a new penetration testing engagement</p>
        </div>
      </div>

      {/* Progress Steps */}
      <Card className="bg-slate-800/50 border-slate-700">
        <CardContent className="p-6">
          <div className="flex justify-between">
            {WIZARD_STEPS.map((step, index) => (
              <div key={step.id} className="flex-1">
                <div className="flex items-center">
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    index < currentStep 
                      ? 'bg-green-600 text-white'
                      : index === currentStep
                        ? 'bg-[#B00020] text-white'
                        : 'bg-slate-700 text-slate-400'
                  }`}>
                    {index < currentStep ? <CheckCircle className="w-4 h-4" /> : index + 1}
                  </div>
                  {index < WIZARD_STEPS.length - 1 && (
                    <div className={`flex-1 h-0.5 ml-2 ${
                      index < currentStep ? 'bg-green-600' : 'bg-slate-700'
                    }`} />
                  )}
                </div>
                <div className="mt-2">
                  <div className={`text-sm font-medium ${
                    index === currentStep ? 'text-white' : 'text-slate-400'
                  }`}>
                    {step.title}
                  </div>
                  <div className="text-xs text-slate-500 mt-1">
                    {step.description}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Step Content */}
      <Card className="bg-slate-800/50 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">
            {WIZARD_STEPS[currentStep].title}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          {renderStepContent()}
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button
          variant="outline"
          onClick={prevStep}
          disabled={currentStep === 0}
          className="text-slate-300"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Previous
        </Button>

        <div className="flex gap-2">
          {currentStep === WIZARD_STEPS.length - 1 ? (
            <ActionButton
              actionFn={createEngagement}
              disabled={!validateCurrentStep()}
              className="bg-[#B00020] hover:bg-[#8B0000]"
              loading={loading}
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              Create Engagement
            </ActionButton>
          ) : (
            <Button
              onClick={nextStep}
              disabled={!validateCurrentStep()}
              className="bg-[#B00020] hover:bg-[#8B0000]"
            >
              Next
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}

import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { User, PentestEngagement } from '@/api/entities';
import { 
  Shield, 
  Plus, 
  Search, 
  Filter,
  Download,
  Eye,
  Settings,
  AlertTriangle,
  CheckCircle2,
  Clock,
  Play,
  FileText
} from 'lucide-react';
import { toast } from 'sonner';
import ActionButton from '../components/ui/ActionButton';

// Mock data for demonstration
const MOCK_ENGAGEMENTS = [
  {
    id: 'eng-1',
    title: 'Acme Web App â€” June 2024',
    type: 'Web App',
    status: 'Delivered',
    priority: 'High',
    vendor_type: 'external',
    vendor_contact: 'security@pentestcorp.com',
    start_date: '2024-06-01',
    end_date: '2024-06-15',
    findings_count: { critical: 2, high: 4, medium: 4, low: 0, info: 1 },
    retest_findings_verified: 8,
    manager_user_id: 'user-1'
  },
  {
    id: 'eng-2',
    title: 'Reddome Infrastructure Assessment',
    type: 'Network',
    status: 'In Progress',
    priority: 'Critical',
    vendor_type: 'internal',
    start_date: '2024-07-01',
    end_date: '2024-07-20',
    findings_count: { critical: 0, high: 2, medium: 6, low: 3, info: 2 },
    retest_findings_verified: 0,
    manager_user_id: 'user-2'
  },
  {
    id: 'eng-3',
    title: 'Mobile Banking App Security Review',
    type: 'Mobile',
    status: 'Scoping',
    priority: 'Medium',
    vendor_type: 'external',
    vendor_contact: 'lead@mobilesec.com',
    start_date: '2024-08-01',
    end_date: '2024-08-10',
    findings_count: { critical: 0, high: 0, medium: 0, low: 0, info: 0 },
    retest_findings_verified: 0,
    manager_user_id: 'user-1'
  }
];

export default function PentestEngagementsPage() {
  const navigate = useNavigate();
  const [engagements, setEngagements] = useState([]);
  const [filteredEngagements, setFilteredEngagements] = useState([]);
  const [user, setUser] = useState(null);
  const [filters, setFilters] = useState({
    search: '',
    status: 'all',
    type: 'all',
    priority: 'all'
  });
  const [loading, setLoading] = useState(true);

  const loadData = useCallback(async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      // In production, this would load actual engagements from the API
      // For now, use mock data
      setEngagements(MOCK_ENGAGEMENTS);
    } catch (error) {
      console.error('Failed to load engagements:', error);
      toast.error('Failed to load engagements');
    } finally {
      setLoading(false);
    }
  }, []); // Dependencies: setUser, setEngagements, setLoading are stable state setters.

  const applyFilters = useCallback(() => {
    let filtered = engagements;

    if (filters.search) {
      filtered = filtered.filter(eng =>
        eng.title.toLowerCase().includes(filters.search.toLowerCase()) ||
        eng.vendor_contact?.toLowerCase().includes(filters.search.toLowerCase())
      );
    }

    if (filters.status !== 'all') {
      filtered = filtered.filter(eng => eng.status === filters.status);
    }

    if (filters.type !== 'all') {
      filtered = filtered.filter(eng => eng.type === filters.type);
    }

    if (filters.priority !== 'all') {
      filtered = filtered.filter(eng => eng.priority === filters.priority);
    }

    setFilteredEngagements(filtered);
  }, [engagements, filters]); // Dependencies: engagements, filters (state variables)

  useEffect(() => {
    loadData();
  }, [loadData]); // Dependency: loadData (memoized with useCallback)

  useEffect(() => {
    applyFilters();
  }, [applyFilters]); // Dependency: applyFilters (memoized with useCallback)

  const getStatusColor = (status) => {
    switch (status) {
      case 'Draft': return 'bg-gray-500/20 text-gray-400';
      case 'Scoping': return 'bg-yellow-500/20 text-yellow-400';
      case 'Approved': return 'bg-blue-500/20 text-blue-400';
      case 'In Progress': return 'bg-purple-500/20 text-purple-400';
      case 'Reporting': return 'bg-orange-500/20 text-orange-400';
      case 'Delivered': return 'bg-green-500/20 text-green-400';
      case 'Retest Planned': return 'bg-cyan-500/20 text-cyan-400';
      case 'Retest In Progress': return 'bg-indigo-500/20 text-indigo-400';
      case 'Closed': return 'bg-slate-500/20 text-slate-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'Critical': return 'bg-red-500/20 text-red-400';
      case 'High': return 'bg-orange-500/20 text-orange-400';
      case 'Medium': return 'bg-yellow-500/20 text-yellow-400';
      case 'Low': return 'bg-green-500/20 text-green-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  const getTotalFindings = (findingsCount) => {
    return Object.values(findingsCount).reduce((sum, count) => sum + count, 0);
  };

  const getCriticalHighCount = (findingsCount) => {
    return findingsCount.critical + findingsCount.high;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-slate-400">Loading engagements...</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-white">Penetration Test Engagements</h1>
          <p className="text-slate-400">Manage security testing engagements and vendor coordination</p>
        </div>
        <div className="flex gap-2">
          <ActionButton
            actionFn={async () => {}}
            variant="outline"
          >
            <Download className="w-4 h-4 mr-2" />
            Export Report
          </ActionButton>
          <ActionButton
            actionFn={async () => navigate(createPageUrl('PentestEngagementNew'))}
            className="bg-[#B00020] hover:bg-[#8B0000]"
          >
            <Plus className="w-4 h-4 mr-2" />
            New Engagement
          </ActionButton>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm text-slate-400">Active Engagements</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {engagements.filter(e => ['In Progress', 'Reporting', 'Retest In Progress'].includes(e.status)).length}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm text-slate-400">Critical/High Findings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-400">
              {engagements.reduce((sum, e) => sum + getCriticalHighCount(e.findings_count), 0)}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm text-slate-400">Awaiting Retest</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-400">
              {engagements.filter(e => e.status === 'Retest Planned').length}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm text-slate-400">Verified Fixed</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-400">
              {engagements.reduce((sum, e) => sum + e.retest_findings_verified, 0)}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card className="bg-slate-800/50 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Filter className="w-5 h-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
              <Input
                placeholder="Search engagements..."
                value={filters.search}
                onChange={(e) => setFilters({...filters, search: e.target.value})}
                className="pl-10 bg-slate-900 border-slate-700 text-white"
              />
            </div>

            <Select value={filters.status} onValueChange={(value) => setFilters({...filters, status: value})}>
              <SelectTrigger className="bg-slate-900 border-slate-700 text-white">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent className="bg-slate-800 border-slate-700">
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="Draft">Draft</SelectItem>
                <SelectItem value="Scoping">Scoping</SelectItem>
                <SelectItem value="Approved">Approved</SelectItem>
                <SelectItem value="In Progress">In Progress</SelectItem>
                <SelectItem value="Reporting">Reporting</SelectItem>
                <SelectItem value="Delivered">Delivered</SelectItem>
                <SelectItem value="Retest Planned">Retest Planned</SelectItem>
                <SelectItem value="Retest In Progress">Retest In Progress</SelectItem>
                <SelectItem value="Closed">Closed</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filters.type} onValueChange={(value) => setFilters({...filters, type: value})}>
              <SelectTrigger className="bg-slate-900 border-slate-700 text-white">
                <SelectValue placeholder="Type" />
              </SelectTrigger>
              <SelectContent className="bg-slate-800 border-slate-700">
                <SelectItem value="all">All Types</SelectItem>
                <SelectItem value="Web App">Web App</SelectItem>
                <SelectItem value="API">API</SelectItem>
                <SelectItem value="Mobile">Mobile</SelectItem>
                <SelectItem value="Cloud Infra">Cloud Infra</SelectItem>
                <SelectItem value="Network">Network</SelectItem>
                <SelectItem value="Social Engineering">Social Engineering</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filters.priority} onValueChange={(value) => setFilters({...filters, priority: value})}>
              <SelectTrigger className="bg-slate-900 border-slate-700 text-white">
                <SelectValue placeholder="Priority" />
              </SelectTrigger>
              <SelectContent className="bg-slate-800 border-slate-700">
                <SelectItem value="all">All Priorities</SelectItem>
                <SelectItem value="Critical">Critical</SelectItem>
                <SelectItem value="High">High</SelectItem>
                <SelectItem value="Medium">Medium</SelectItem>
                <SelectItem value="Low">Low</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Engagements Table */}
      <Card className="bg-slate-800/50 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Engagements</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-slate-700">
                  <TableHead className="text-slate-300">Title</TableHead>
                  <TableHead className="text-slate-300">Type</TableHead>
                  <TableHead className="text-slate-300">Status</TableHead>
                  <TableHead className="text-slate-300">Priority</TableHead>
                  <TableHead className="text-slate-300">Vendor</TableHead>
                  <TableHead className="text-slate-300">Findings</TableHead>
                  <TableHead className="text-slate-300">Timeline</TableHead>
                  <TableHead className="text-slate-300">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredEngagements.map(engagement => (
                  <TableRow key={engagement.id} className="border-slate-800 hover:bg-slate-700/30">
                    <TableCell className="font-medium text-white">
                      {engagement.title}
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className="text-slate-300">
                        {engagement.type}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge className={getStatusColor(engagement.status)}>
                        {engagement.status}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge className={getPriorityColor(engagement.priority)}>
                        {engagement.priority}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-slate-300">
                      <div className="flex items-center gap-1">
                        {engagement.vendor_type === 'internal' ? (
                          <Badge variant="outline" className="text-blue-400">Internal</Badge>
                        ) : (
                          <Badge variant="outline" className="text-green-400">External</Badge>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-slate-300">
                          {getTotalFindings(engagement.findings_count)} total
                        </span>
                        {getCriticalHighCount(engagement.findings_count) > 0 && (
                          <Badge className="bg-red-500/20 text-red-400 text-xs">
                            {getCriticalHighCount(engagement.findings_count)} C/H
                          </Badge>
                        )}
                      </div>
                    </TableCell>
                    <TableCell className="text-slate-300 text-sm">
                      <div>{new Date(engagement.start_date).toLocaleDateString()}</div>
                      <div className="text-xs text-slate-400">
                        to {new Date(engagement.end_date).toLocaleDateString()}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => navigate(createPageUrl(`PentestEngagementDetail?id=${engagement.id}`))}
                        >
                          <Eye className="w-4 h-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {filteredEngagements.length === 0 && (
            <div className="text-center py-12">
              <Shield className="w-12 h-12 mx-auto text-slate-400 mb-4" />
              <p className="text-slate-400 mb-4">
                {filters.search || filters.status !== 'all' || filters.type !== 'all' || filters.priority !== 'all'
                  ? 'No engagements match your filters'
                  : 'No penetration test engagements yet'}
              </p>
              <Button 
                onClick={() => navigate(createPageUrl('PentestEngagementNew'))}
                className="bg-[#B00020] hover:bg-[#8B0000]"
              >
                <Plus className="w-4 h-4 mr-2" />
                Create First Engagement
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Plus, MoreVertical, Trash2, Edit } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';

const MOCK_TEMPLATES = [
  { id: 'tpl-1', name: 'Standard Executive Summary', type: 'Executive', sections: ['Summary', 'Top 3 Risks', 'Roadmap'], isDefault: true },
  { id: 'tpl-2', name: 'Full Technical Report', type: 'Technical', sections: ['Scope', 'Methodology', 'Findings', 'Remediation', 'Appendix'], isDefault: false },
  { id: 'tpl-3', name: 'ISO 27001 Compliance View', type: 'Compliance', sections: ['Summary', 'Control Mapping', 'Gaps'], isDefault: false },
  { id: 'tpl-4', name: 'Retest Verification Summary', type: 'Retest', sections: ['Original Findings', 'Retest Results', 'Conclusion'], isDefault: false },
];

const ALL_SECTIONS = ['Summary', 'Top 3 Risks', 'Roadmap', 'Scope', 'Methodology', 'Findings', 'Remediation', 'Appendix', 'Control Mapping', 'Gaps', 'Original Findings', 'Retest Results', 'Conclusion'];

function TemplateBuilderModal({ isOpen, onClose, template }) {
  const [name, setName] = useState(template?.name || '');
  const [type, setType] = useState(template?.type || 'Technical');
  const [sections, setSections] = useState(template?.sections || []);

  const handleSectionChange = (section) => {
    setSections(prev => 
      prev.includes(section) ? prev.filter(s => s !== section) : [...prev, section]
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="bg-slate-800 border-slate-700 text-white">
        <DialogHeader>
          <DialogTitle>{template ? 'Edit' : 'Create'} Report Template</DialogTitle>
        </DialogHeader>
        <div className="space-y-4 py-4">
          <div>
            <Label htmlFor="name">Template Name</Label>
            <Input id="name" value={name} onChange={e => setName(e.target.value)} className="bg-slate-900 border-slate-700" />
          </div>
          <div>
            <Label>Sections</Label>
            <div className="grid grid-cols-2 gap-2 mt-2 border border-slate-700 p-3 rounded-lg">
              {ALL_SECTIONS.map(section => (
                <div key={section} className="flex items-center gap-2">
                  <Checkbox 
                    id={`sec-${section}`}
                    checked={sections.includes(section)}
                    onCheckedChange={() => handleSectionChange(section)}
                  />
                  <Label htmlFor={`sec-${section}`} className="text-sm">{section}</Label>
                </div>
              ))}
            </div>
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>Cancel</Button>
          <Button className="bg-[#B00020] hover:bg-[#8B0000]">Save Template</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

export default function PentestTemplatesPage() {
  const [templates, setTemplates] = useState(MOCK_TEMPLATES);
  const [showModal, setShowModal] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState(null);

  const handleEdit = (template) => {
    setEditingTemplate(template);
    setShowModal(true);
  };

  const handleCreate = () => {
    setEditingTemplate(null);
    setShowModal(true);
  };

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-white">Report Templates</h1>
          <p className="text-slate-400">Manage templates for generating pentest reports.</p>
        </div>
        <Button onClick={handleCreate} className="bg-[#B00020] hover:bg-[#8B0000]">
          <Plus className="w-4 h-4 mr-2" />
          Create Template
        </Button>
      </div>

      <Card className="bg-slate-800/50 border-slate-700">
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow className="border-b-slate-700">
                <TableHead className="text-slate-300">Name</TableHead>
                <TableHead className="text-slate-300">Type</TableHead>
                <TableHead className="text-slate-300">Sections</TableHead>
                <TableHead></TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {templates.map((template) => (
                <TableRow key={template.id} className="border-b-slate-800 hover:bg-slate-800/30">
                  <TableCell className="font-medium text-white">{template.name} {template.isDefault && <Badge variant="secondary" className="ml-2">Default</Badge>}</TableCell>
                  <TableCell><Badge variant="outline">{template.type}</Badge></TableCell>
                  <TableCell className="text-slate-400 text-xs">{template.sections.join(', ')}</TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon"><MoreVertical className="w-4 h-4" /></Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent>
                        <DropdownMenuItem onSelect={() => handleEdit(template)}><Edit className="w-4 h-4 mr-2" />Edit</DropdownMenuItem>
                        <DropdownMenuItem className="text-red-400"><Trash2 className="w-4 h-4 mr-2" />Delete</DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
      
      {showModal && <TemplateBuilderModal isOpen={showModal} onClose={() => setShowModal(false)} template={editingTemplate} />}
    </div>
  );
}
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  TrendingUp, 
  TrendingDown, 
  RefreshCw,
  AlertTriangle,
  Shield,
  Activity,
  BarChart3
} from 'lucide-react';
import { RealTimeSecurityDashboard } from '../../services/RealTimeSecurityDashboard';
import { format, subDays, startOfDay } from 'date-fns';

export default function VulnerabilityTrendsWidget({ className }) {
  const [trends, setTrends] = useState(null);
  const [timeframe, setTimeframe] = useState('7d');
  const [dashboard] = useState(() => new RealTimeSecurityDashboard());

  useEffect(() => {
    // Set up event listeners
    const handleTrends = (trendData) => {
      setTrends(trendData);
    };

    dashboard.addEventListener('vulnerability_trends', handleTrends);

    // Generate mock trend data
    const generateTrendData = (days) => {
      const data = [];
      const today = new Date();
      
      for (let i = days - 1; i >= 0; i--) {
        const date = startOfDay(subDays(today, i));
        const baseVulns = 100 + Math.random() * 50;
        const criticalTrend = i > days/2 ? 1.1 : 0.9; // Decreasing critical over time
        
        data.push({
          date: date.toISOString(),
          critical: Math.floor(baseVulns * 0.05 * criticalTrend + Math.random() * 3),
          high: Math.floor(baseVulns * 0.15 + Math.random() * 8),
          medium: Math.floor(baseVulns * 0.35 + Math.random() * 15),
          low: Math.floor(baseVulns * 0.45 + Math.random() * 20),
          resolved: Math.floor(baseVulns * 0.3 + Math.random() * 10)
        });
      }
      
      return data;
    };

    const days = timeframe === '7d' ? 7 : timeframe === '30d' ? 30 : 90;
    const trendData = generateTrendData(days);
    
    handleTrends({
      timeframe,
      data: trendData,
      summary: {
        totalNew: trendData.reduce((sum, day) => sum + day.critical + day.high + day.medium + day.low, 0),
        totalResolved: trendData.reduce((sum, day) => sum + day.resolved, 0),
        criticalTrend: -12.5, // percentage change
        highTrend: -8.3,
        mediumTrend: 4.2,
        lowTrend: 15.7
      }
    });

    // Cleanup
    return () => {
      dashboard.removeEventListener('vulnerability_trends', handleTrends);
    };
  }, [dashboard, timeframe]);

  const handleRefresh = () => {
    dashboard.refreshAllStreams();
  };

  const getTrendIcon = (trend) => {
    if (trend > 0) return <TrendingUp className="w-3 h-3 text-red-400" />;
    if (trend < 0) return <TrendingDown className="w-3 h-3 text-green-400" />;
    return <Activity className="w-3 h-3 text-gray-400" />;
  };

  const getTrendColor = (trend) => {
    if (trend > 0) return 'text-red-400';
    if (trend < 0) return 'text-green-400';
    return 'text-gray-400';
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-500/20';
      case 'high': return 'text-orange-400 bg-orange-500/20';
      case 'medium': return 'text-yellow-400 bg-yellow-500/20';
      case 'low': return 'text-blue-400 bg-blue-500/20';
      default: return 'text-gray-400 bg-gray-500/20';
    }
  };

  const formatTrend = (trend) => {
    const sign = trend > 0 ? '+' : '';
    return `${sign}${trend.toFixed(1)}%`;
  };

  const createMiniChart = (data, severity) => {
    const values = data.map(d => d[severity]);
    const max = Math.max(...values);
    const points = values.map((value, index) => {
      const x = (index / (values.length - 1)) * 100;
      const y = 100 - (value / max) * 100;
      return `${x},${y}`;
    }).join(' ');

    const isIncreasing = values[values.length - 1] > values[0];
    const strokeColor = isIncreasing ? '#ef4444' : '#22c55e';

    return (
      <svg className="w-16 h-8" viewBox="0 0 100 100" preserveAspectRatio="none">
        <polyline
          fill="none"
          stroke={strokeColor}
          strokeWidth="3"
          points={points}
        />
      </svg>
    );
  };

  if (!trends) {
    return (
      <Card className={`bg-slate-800/50 border-slate-700 ${className}`}>
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <BarChart3 className="w-5 h-5 text-blue-400" />
            Vulnerability Trends
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-32 text-slate-400">
            <Activity className="w-8 h-8 animate-pulse mr-2" />
            Loading trends...
          </div>
        </CardContent>
      </Card>
    );
  }

  const latestData = trends.data[trends.data.length - 1];
  const currentTotal = latestData.critical + latestData.high + latestData.medium + latestData.low;

  return (
    <Card className={`bg-slate-800/50 border-slate-700 ${className}`}>
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <BarChart3 className="w-5 h-5 text-blue-400" />
          Vulnerability Trends
          <div className="ml-auto flex items-center gap-2">
            <Select value={timeframe} onValueChange={setTimeframe}>
              <SelectTrigger className="w-20 h-8 bg-slate-700 border-slate-600 text-white text-xs">
                <SelectValue />
              </SelectTrigger>
              <SelectContent className="bg-slate-700 border-slate-600">
                <SelectItem value="7d" className="text-white">7d</SelectItem>
                <SelectItem value="30d" className="text-white">30d</SelectItem>
                <SelectItem value="90d" className="text-white">90d</SelectItem>
              </SelectContent>
            </Select>
            <Button
              size="sm"
              variant="ghost"
              onClick={handleRefresh}
              className="p-1 h-auto text-slate-400 hover:text-white"
            >
              <RefreshCw className="w-4 h-4" />
            </Button>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Current Status Overview */}
        <div className="grid grid-cols-2 gap-3">
          <div className="bg-slate-700/50 rounded-lg p-3">
            <div className="text-lg font-bold text-white">{currentTotal}</div>
            <div className="text-xs text-slate-400">Active Vulnerabilities</div>
          </div>
          <div className="bg-slate-700/50 rounded-lg p-3">
            <div className="text-lg font-bold text-green-400">{trends.summary.totalResolved}</div>
            <div className="text-xs text-slate-400">Resolved ({timeframe})</div>
          </div>
        </div>

        {/* Severity Breakdown with Trends */}
        <div className="space-y-3">
          <h4 className="text-sm font-medium text-white">Severity Trends</h4>
          
          {/* Critical */}
          <div className="flex items-center justify-between p-2 bg-slate-700/30 rounded-lg">
            <div className="flex items-center gap-2">
              <AlertTriangle className="w-4 h-4 text-red-400" />
              <span className="text-sm text-white">Critical</span>
              <Badge className={getSeverityColor('critical')}>
                {latestData.critical}
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              {createMiniChart(trends.data, 'critical')}
              <div className="flex items-center gap-1">
                {getTrendIcon(trends.summary.criticalTrend)}
                <span className={`text-xs ${getTrendColor(trends.summary.criticalTrend)}`}>
                  {formatTrend(trends.summary.criticalTrend)}
                </span>
              </div>
            </div>
          </div>

          {/* High */}
          <div className="flex items-center justify-between p-2 bg-slate-700/30 rounded-lg">
            <div className="flex items-center gap-2">
              <AlertTriangle className="w-4 h-4 text-orange-400" />
              <span className="text-sm text-white">High</span>
              <Badge className={getSeverityColor('high')}>
                {latestData.high}
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              {createMiniChart(trends.data, 'high')}
              <div className="flex items-center gap-1">
                {getTrendIcon(trends.summary.highTrend)}
                <span className={`text-xs ${getTrendColor(trends.summary.highTrend)}`}>
                  {formatTrend(trends.summary.highTrend)}
                </span>
              </div>
            </div>
          </div>

          {/* Medium */}
          <div className="flex items-center justify-between p-2 bg-slate-700/30 rounded-lg">
            <div className="flex items-center gap-2">
              <Shield className="w-4 h-4 text-yellow-400" />
              <span className="text-sm text-white">Medium</span>
              <Badge className={getSeverityColor('medium')}>
                {latestData.medium}
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              {createMiniChart(trends.data, 'medium')}
              <div className="flex items-center gap-1">
                {getTrendIcon(trends.summary.mediumTrend)}
                <span className={`text-xs ${getTrendColor(trends.summary.mediumTrend)}`}>
                  {formatTrend(trends.summary.mediumTrend)}
                </span>
              </div>
            </div>
          </div>

          {/* Low */}
          <div className="flex items-center justify-between p-2 bg-slate-700/30 rounded-lg">
            <div className="flex items-center gap-2">
              <Shield className="w-4 h-4 text-blue-400" />
              <span className="text-sm text-white">Low</span>
              <Badge className={getSeverityColor('low')}>
                {latestData.low}
              </Badge>
            </div>
            <div className="flex items-center gap-2">
              {createMiniChart(trends.data, 'low')}
              <div className="flex items-center gap-1">
                {getTrendIcon(trends.summary.lowTrend)}
                <span className={`text-xs ${getTrendColor(trends.summary.lowTrend)}`}>
                  {formatTrend(trends.summary.lowTrend)}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Summary Stats */}
        <div className="pt-2 border-t border-slate-600">
          <div className="grid grid-cols-2 gap-4 text-xs">
            <div>
              <span className="text-slate-400">New ({timeframe}):</span>
              <span className="ml-2 text-white font-medium">{trends.summary.totalNew}</span>
            </div>
            <div>
              <span className="text-slate-400">Resolution Rate:</span>
              <span className="ml-2 text-green-400 font-medium">
                {Math.round((trends.summary.totalResolved / trends.summary.totalNew) * 100)}%
              </span>
            </div>
          </div>
        </div>

        {/* Time Period Indicator */}
        <div className="text-xs text-slate-400 text-center">
          Data from {format(new Date(trends.data[0].date), 'MMM dd')} - {format(new Date(trends.data[trends.data.length - 1].date), 'MMM dd')}
        </div>
      </CardContent>
    </Card>
  );
}
